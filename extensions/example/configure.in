#--------------------------------------------------------------------
# This very first macro is used to verify that the configure script can 
# find the sources.  The argument to AC_INIT should be a unique filename
# for this package, and can be a relative path, such as:
#
# AC_INIT(../generic/tcl.h)
#--------------------------------------------------------------------

AC_INIT(../../generic/tclexpat.h)

TDOM_SRC_DIR=../..

#--------------------------------------------------------------------
# Set your version numbers here.  The NODOT_VERSION is required
# for constructing the library name on systems that don't like dots
# in library names (Windows).  The VERSION variable is used on the
# other systems.
#--------------------------------------------------------------------

MAJOR_VERSION=0
MINOR_VERSION=1
PATCHLEVEL=0
VERSION=${MAJOR_VERSION}.${MINOR_VERSION}

PACKAGE=example

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(PACKAGE)
AC_SUBST(VERSION)
NODOT_VERSION=${MAJOR_VERSION}${MINOR_VERSION}

#--------------------------------------------------------------------
# We put this here so that you can compile with -DVERSION="1.2" to
# encode the package version directly into the source files.
#--------------------------------------------------------------------

eval AC_DEFINE_UNQUOTED(VERSION, "${VERSION}")


#--------------------------------------------------------------------
#  determine ANSI-C compiler switches
#--------------------------------------------------------------------
AC_DEFUN([CF_ANSI_CC_CHECK],
[
AC_MSG_CHECKING(for ${CC-cc} option to accept ANSI C)
AC_CACHE_VAL(cf_cv_ansi_cc,[
cf_cv_ansi_cc=no
cf_save_CFLAGS="$CFLAGS"
# Don't try gcc -ansi; that turns off useful extensions and
# breaks some systems' header files.
# AIX			-qlanglvl=ansi
# Ultrix and OSF/1	-std1
# HP-UX			-Aa -D_HPUX_SOURCE
# SVR4			-Xc
# UnixWare 1.2		(cannot use -Xc, since ANSI/POSIX clashes)
for cf_arg in "-DCC_HAS_PROTOS" "" -qlanglvl=ansi -std1 "-Aa -D_HPUX_SOURCE" -Xc
do
	CFLAGS="$cf_save_CFLAGS $cf_arg"
	AC_TRY_COMPILE(
[
#ifndef CC_HAS_PROTOS
#if !defined(__STDC__) || __STDC__ != 1
choke me
#endif
#endif
],[
	int test (int i, double x);
	struct s1 {int (*f) (int a);};
	struct s2 {int (*f) (double a);};],
	[cf_cv_ansi_cc="$cf_arg"; break])
done
CFLAGS="$cf_save_CFLAGS"
])
AC_MSG_RESULT($cf_cv_ansi_cc)

if test "$cf_cv_ansi_cc" != "no"; then
if test ".$cf_cv_ansi_cc" != ".-DCC_HAS_PROTOS"; then
	CFLAGS="$CFLAGS $cf_cv_ansi_cc"
else
	AC_DEFINE(CC_HAS_PROTOS)
fi
fi
])dnl

CF_ANSI_CC_CHECK
ANSI_C_FLAGS="$CFLAGS"


#--------------------------------------------------------------------
# Check whether --enable-gcc or --disable-gcc was given.  Do this 
# before AC_CYGWIN is called so the compiler can 
# be fully tested by built-in autoconf tools.
# This macro also calls AC_PROG_CC to set the compiler if --enable-gcc
# was not used.
#--------------------------------------------------------------------
SC_ENABLE_GCC
AC_PROG_INSTALL


#--------------------------------------------------------------------
# Checks to see if the make program sets the $MAKE variable.
#--------------------------------------------------------------------

AC_PROG_MAKE_SET

#--------------------------------------------------------------------
# Find ranlib
#--------------------------------------------------------------------

AC_PROG_RANLIB

#--------------------------------------------------------------------
# This macro performs additional compiler tests.
#--------------------------------------------------------------------

AC_CYGWIN


#--------------------------------------------------------------------
# Determines the correct binary file extension (.o, .obj, .exe etc.)
#--------------------------------------------------------------------

AC_OBJEXT
AC_EXEEXT


#--------------------------------------------------------------------
# "cygpath" is used on windows to generate native path names for include
# files.
# These variables should only be used with the compiler and linker since
# they generate native path names.
#
# Unix tclConfig.sh points SRC_DIR at the top-level directory of
# the Tcl sources, while the Windows tclConfig.sh points SRC_DIR at
# the win subdirectory.  Hence the different usages of SRC_DIR below.
#
# This must be done before calling SC_PUBLIC_TCL_HEADERS
#--------------------------------------------------------------------

case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*)
        CYGPATH="cygpath -w"
    ;;
    *)
        CYGPATH=echo
    ;;
esac

AC_SUBST(CYGPATH)  


#--------------------------------------------------------------------
# Load the tclConfig.sh file
#--------------------------------------------------------------------

SC_PATH_TCLCONFIG
SC_LOAD_TCLCONFIG

SC_PUBLIC_TCL_HEADERS


#--------------------------------------------------------------------
# Set some values that point to parts of the Tcl source tree.  Many
# extensions require headers/source files that Tcl doesn't normally
# export.
#
# "cygpath" is used on windows to generate native path names for include
# files.
#--------------------------------------------------------------------

case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*)
	CYGPATH="cygpath -w"
	RELPATH=".. .. bin"
	TCL_TOP_DIR_NATIVE=\"`${CYGPATH} ${TCL_SRC_DIR}/..`\"
	TCL_GENERIC_DIR_NATIVE=\"`${CYGPATH} ${TCL_SRC_DIR}/../generic`\"
	TCL_UNIX_DIR_NATIVE=\"`${CYGPATH} ${TCL_SRC_DIR}/../unix`\"
	TCL_WIN_DIR_NATIVE=\"`${CYGPATH} ${TCL_SRC_DIR}/../win`\"
	TCL_BMAP_DIR_NATIVE=\"`${CYGPATH} ${TCL_SRC_DIR}/../bitmaps`\"
	TCL_TOOL_DIR_NATIVE=\"`${CYGPATH} ${TCL_SRC_DIR}/../tools`\"
	eval "INCLUDE_DIR=${includedir}"
	eval "LIB_DIR=${libdir}"
	SHLIB_LDFLAGS="-libpath:\"`${CYGPATH} ${LIB_DIR}`\""
	INCLUDE_DIR_NATIVE=\"`${CYGPATH} ${INCLUDE_DIR}`\"
    ;;
    *)
	CYGPATH=echo
	RELPATH=..
	TCL_TOP_DIR_NATIVE=${TCL_SRC_DIR}
	TCL_GENERIC_DIR_NATIVE='$(TCL_TOP_DIR_NATIVE)/generic'
	TCL_UNIX_DIR_NATIVE='$(TCL_TOP_DIR_NATIVE)/unix'
	TCL_WIN_DIR_NATIVE='$(TCL_TOP_DIR_NATIVE)/win'
	TCL_BMAP_DIR_NATIVE='$(TCL_TOP_DIR_NATIVE)/bitmaps'
	TCL_TOOL_DIR_NATIVE='$(TCL_TOP_DIR_NATIVE)/tools'
	INCLUDE_DIR_NATIVE="${includedir}"
    ;;
esac

#--------------------------------------------------------------------
# Locate the platform-specific piece of the Tcl source tree.
#--------------------------------------------------------------------

case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*)
	TCL_PLATFORM_DIR_NATIVE=${TCL_WIN_DIR_NATIVE}
    ;;
    *)
	TCL_PLATFORM_DIR_NATIVE=${TCL_UNIX_DIR_NATIVE}
    ;;
esac

#--------------------------------------------------------------------
# Other libraries that we need for this module
#--------------------------------------------------------------------

#SC_LIB_SPEC(tclstub)
#SC_LIB_SPEC(expat)

#--------------------------------------------------------------------
# Put all of these in the Makefile so we can add them to the compiler's
# include line.
#--------------------------------------------------------------------

AC_SUBST(TCL_TOP_DIR_NATIVE)
AC_SUBST(TCL_GENERIC_DIR_NATIVE)
AC_SUBST(TCL_UNIX_DIR_NATIVE)
AC_SUBST(TCL_WIN_DIR_NATIVE)
AC_SUBST(TCL_BMAP_DIR_NATIVE)
AC_SUBST(TCL_TOOL_DIR_NATIVE)
AC_SUBST(TCL_PLATFORM_DIR_NATIVE)
AC_SUBST(TCL_BIN_DIR_NATIVE)
AC_SUBST(INCLUDE_DIR_NATIVE)
AC_SUBST(CYGPATH)
AC_SUBST(RELPATH)

#--------------------------------------------------------------------
# A few miscellaneous platform-specific items:
#
# Define a special symbol for Windows (BUILD_expat in this case) so
# that we create the export library with the dll.  See expat.h on how
# to use this.
#
# Windows creates a few extra files that need to be cleaned up.
#--------------------------------------------------------------------

case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*)
	AC_DEFINE(BUILD_expat)
	CLEANFILES="*.lib *.dll *.exp *.ilk *.pdb vc50.pch"
	AC_SUBST(CLEANFILES)
    ;;
    *)
    ;;
esac

#--------------------------------------------------------------------
# Check whether --enable-threads or --disable-threads was given.
# So far only Tcl responds to this one.
#--------------------------------------------------------------------

SC_ENABLE_THREADS

#--------------------------------------------------------------------
# The statement below defines a collection of symbols related to
# building as a shared library instead of a static library.
#--------------------------------------------------------------------

SC_ENABLE_SHARED

#--------------------------------------------------------------------
# This macro figures out what flags to use with the compiler/linker
# when building shared/static debug/optimized objects.  This information
# is all taken from the tclConfig.sh file.
#--------------------------------------------------------------------

CFLAGS_DEBUG="$ANSI_C_FLAGS $TCL_CFLAGS_DEBUG"
CFLAGS_OPTIMIZE="$ANSI_C_FLAGS $TCL_CFLAGS_OPTIMIZE"
#eval LDFLAGS_DEBUG="${TCL_LD_FLAGS} ${TCL_LDFLAGS_DEBUG}"
#eval LDFLAGS_OPTIMIZE="${TCL_LD_FLAGS} ${TCL_LDFLAGS_OPTIMIZE}"
LD_SEARCH_FLAGS="${TCL_LD_SEARCH_FLAGS}"
SHLIB_LD=${TCL_SHLIB_LD}
STLIB_LD=${TCL_STLIB_LD}
SHLIB_CFLAGS=${TCL_SHLIB_CFLAGS}


#--------------------------------------------------------------------
# Set the default compiler switches based on the --enable-symbols 
# option.
#--------------------------------------------------------------------

SC_ENABLE_SYMBOLS

if test "${SHARED_BUILD}" = "1" ; then
    CFLAGS="${CFLAGS_DEFAULT} ${CFLAGS_WARNING} ${SHLIB_CFLAGS}"
else
    CFLAGS="${CFLAGS_DEFAULT} ${CFLAGS_WARNING}"
fi

if test "${SHARED_BUILD}" = "1" ; then
    LDFLAGS="${LDFLAGS_DEFAULT} ${SHLIB_LD}"
else
    LDFLAGS="${LDFLAGS_DEFAULT}"
fi

#--------------------------------------------------------------------
# Everyone should be linking against the Tcl stub library.  If you
# can't for some reason, remove this definition.  If you aren't using
# stubs, you also need to modify the SHLIB_LD_LIBS setting below to
# link against the non-stubbed Tcl library.
#--------------------------------------------------------------------

AC_DEFINE(USE_TCL_STUBS)

#--------------------------------------------------------------------
# This macro generates a line to use when building a library.  It
# depends on values set by the SC_ENABLE_SHARED, SC_ENABLE_SYMBOLS,
# and SC_LOAD_TCLCONFIG macros above.
#--------------------------------------------------------------------

SC_MAKE_LIB

#--------------------------------------------------------------------
# eval these two values to dereference the ${DBGX} variable.
#--------------------------------------------------------------------

eval "SHARED_LIB_SUFFIX=${TCL_SHARED_LIB_SUFFIX}"
eval "UNSHARED_LIB_SUFFIX=${TCL_UNSHARED_LIB_SUFFIX}"


#--------------------------------------------------------------------
# Shared libraries and static libraries have different names.
#--------------------------------------------------------------------

case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*)
        eval "EXAMPLE_SHLIB_FILE=example${SHARED_LIB_SUFFIX}"
        eval "EXAMPLE_LIB_FILE=example${UNSHARED_LIB_SUFFIX}"
	if test "${SHARED_BUILD}" = "1" ; then
	    RANLIB=:
	fi
	#if test "${SHARED_BUILD}" = "1" ; then
	#    #SHLIB_LD_LIBS="${tclstub_LIB_SPEC} ${expat_LIB_SPEC}"
	#    SHLIB_LD_LIBS="${tclstub_LIB_SPEC}"
	#    eval "EXAMPLE_LIB_FILE=example${SHARED_LIB_SUFFIX}"
	#    RANLIB=:
	#else
	#    eval "EXAMPLE_LIB_FILE=example${UNSHARED_LIB_SUFFIX}"
	#fi
	;;
    *)
        eval "EXAMPLE_SHLIB_FILE=example${SHARED_LIB_SUFFIX}"
        eval "EXAMPLE_LIB_FILE=example${UNSHARED_LIB_SUFFIX}"
	if test "${SHARED_BUILD}" = "1" ; then
	    RANLIB=:
	fi
	#if test "${SHARED_BUILD}" = "1" ; then
	#    #SHLIB_LD_LIBS="${tclstub_LIB_SPEC} ${expat_LIB_SPEC}"
	#    SHLIB_LD_LIBS="${tclstub_LIB_SPEC}"
	#    eval "EXAMPLE_LIB_FILE=example${SHARED_LIB_SUFFIX}"
	#    RANLIB=:
	#else
	#    eval "EXAMPLE_LIB_FILE=example${UNSHARED_LIB_SUFFIX}"
	#fi
	;;
esac

AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(CFLAGS)
AC_SUBST(STLIB_LD)
AC_SUBST(SHLIB_LD)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(SHLIB_LDFLAGS)
AC_SUBST(LD_SEARCH_FLAGS)

AC_SUBST(EXAMPLE_SHLIB_FILE)
AC_SUBST(SHLIB_LD_LIBS)
AC_SUBST(TDOM_SRC_DIR)

AC_SUBST(LDFLAGS_OPTIMIZE)

#echo "CFLAGS=$CFLAGS"
#echo "LDFLAGS=$LDFLAGS"
#echo "LDFLAGS_DEFAULT=$LDFLAGS_DEFAULT"
#echo "LDFLAGS_DEBUG=$LDFLAGS_DEBUG"
#echo "LDFLAGS_OPTIMIZE=$LDFLAGS_OPTIMIZE"
#echo "SHLIB_LDFLAGS=$SHLIB_LDFLAGS"
#echo "LD_SEARCH_FLAGS=$LD_SEARCH_FLAGS"

#--------------------------------------------------------------------
# Find a working Tcl intperpreter so we can generate the pkgIndex.tcl file
#--------------------------------------------------------------------

SC_PROG_TCLSH

#--------------------------------------------------------------------
# Finally, substitute all of the various values into the Makefile.
#--------------------------------------------------------------------

AC_OUTPUT([Makefile \
	pkgIndex.tcl],
	chmod +x ${srcdir}/install-sh ${srcdir}/mkinstalldirs)
