# Features covered: DOM functions
#
# This file contains a collection of tests for the DOM methods of
# tDOM.
# Tested commands and object commands:
# dom:
#    dom-1.*: createDocument, createDocumentNS
#    dom-2.*: parse
#
# Copyright (c) 2002 Rolf Ade.

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import -force ::tcltest::*
}

if {[catch {package require tdom 0.7}]} {
   puts stderr "Cannot load tDOM 0.7 package"
   return
}

test dom-1.1 {createDocument with root node name not a XML Name} {
    list [catch {dom createDocument "root node"} msg] $msg
} "1 {invalid root element name}"

test dom-1.2 {createDocument with root node name not a XML Name} {
    list [catch {dom createDocument "1root"} msg] $msg
} "1 {invalid root element name}"

test dom-1.3 {createDocument - root name us-ascii} {
    dom createDocument "root" doc 
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "root"

test dom-1.4 {createDocument - root name with UTF-8 chars} {
    dom createDocument "\u00c4\u00d4\u00dc" doc 
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "\u00c4\u00d4\u00dc"
    
test dom-1.5 {createDocument with FQ root name} {
    dom createDocument "foo:bar" doc
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "foo:bar"

test dom-1.6 {createDocument with wrong # of args} {
    list [catch {dom createDocument "root" "http:/foo:bar" doc} msg] $msg
} "1 {wrong \# args: should be \"createDocument docElemName ?newObjVar?\"}"

test dom-1.7 {createDocumentNS - check root name} {
    set doc [dom createDocumentNS "http://foo.bar" "root"]
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "root"

test dom-1.8 {createDocumentNS - check the NS of the created root} {
    dom createDocumentNS "http://foo.bar" "root" doc
    set root [$doc documentElement]
    set result [$root namespaceURI]
    $doc delete
    set result
} "http://foo.bar"    

test dom-1.9 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "foo bar" doc} msg] $msg
} "1 {invalid local name}"

test dom-1.10 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "a:b:c" doc} msg] $msg
} "1 {invalid local name}"

test dom-1.11 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "a b:b" doc} msg] $msg
} "1 {invalid prefix name}"

test dom-1.12 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "a:a b" doc} msg] $msg
} "1 {invalid local name}"

test dom-1.13 {createDocumentNS - check root name} {
    set doc [dom createDocumentNS "http://foo.bar" foo:root]
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "foo:root"

test dom-2.1 {Don't quash white space at start or end of non white space content} {knownBug} {
    set doc [dom parse {<root>
    some content
    </root>}]
    set root [$doc documentElement]
    $root text
} {
    some content
    }

test dom-3.1 {repetitived documentElement with objVar, then delete} {knownBug} {
    dom createDocument "root" doc 
    $doc documentElement root
    $doc delete
    
    dom createDocument "\u00c4\u00d4\u00dc" doc 
    $doc documentElement root
    set result [$root nodeName]
    $doc delete
    set result
} "\u00c4\u00d4\u00dc"

test dom-4.1 {create nodes with same prefix, different uri's} {
    dom createDocumentNS "uri1" "p:a" doc
    set root [$doc documentElement]
    set node1 [$doc createElementNS "uri2" "p:b"]
    $root appendChild $node1
    set node2 [$doc createElementNS "uri1" "p:c"]
    $node1 appendChild $node2
    set result [$root asXML]
    $doc delete
    set result
} {<p:a xmlns:p="uri1">
    <p:b xmlns:p="uri2">
        <p:c xmlns:p="uri1"/>
    </p:b>
</p:a>
}

test dom-4.2 {parse doc with various re-declaration of a prefix} {
    set doc [dom parse {<p:a xmlns:p="uri1">
    <p:b xmlns:p="uri2">
        <p:c xmlns:p="uri1"/>
    </p:b>
</p:a>}]
    set root [$doc documentElement]
    set result [$root asXML]
    $doc delete
    set result
} {<p:a xmlns:p="uri1">
    <p:b xmlns:p="uri2">
        <p:c xmlns:p="uri1"/>
    </p:b>
</p:a>
}

test dom-4.3 {setAttribute} {
    dom createDocumentNS "uri1" "p:root" doc
    set root [$doc documentElement]
    $root setAttribute attr1 attr1Value
    set result [$root asXML]
    $doc delete
    set result
} {<p:root xmlns:p="uri1" attr1="attr1Value"/>
}

test dom-4.4 {parse doc with default NS declaration} {
    set doc [dom parse {<a xmlns:p="uri">
    <p:b/>
    <p:b/>
</a>}]
    set root [$doc documentElement]
    set result [$root asXML]
    $doc delete
    set result
} {<a xmlns:p="uri">
    <p:b/>
    <p:b/>
</a>
}

test dom-4.5 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS ""  xmlns:p uri
    $root setAttributeNS uri p:attr attrValue
    set result [$root asXML]
    $doc delete
    set result
} {<root xmlns:p="uri" p:attr="attrValue"/>
}

test dom-4.6 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr attrValue
    $root setAttributeNS ""  xmlns:p uri
    set result [$root asXML]
    $doc delete
    set result
} {<root xmlns:p="uri" p:attr="attrValue"/>
}

test dom-4.7 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr1 attrValue
    set result [$root getAttributeNS uri attr1]
    $doc delete
    set result
} {attrValue}

test dom-4.8 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS ""  xmlns:p uri
    $root setAttributeNS uri p:attr1 attrValue
    set result [$root getAttributeNS uri attr1]
    $doc delete
    set result
} {attrValue}

test dom-4.9 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr1 attrValue
    set result [$root attributes *]
    $doc delete
    set result
} {{attr1 p uri}}

test dom-4.10 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    set result [catch {$root setAttributeNS {} p:attr1 attrValue}]
    $doc delete
    set result
} {1}

test dom-4.11 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    set result [catch {$root setAttributeNS uri attr1 attrValue}]
    $doc delete
    set result
} {1}

test dom-4.12 {setAttributeNS - special prefix "xml"} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS "" xml:attr1 attrValue
    set result [$root attributes *]
    $doc delete
    set result
} {{attr1 xml http://www.w3.org/XML/1998/namespace}}

test dom-5.1 {insert FQ Element} {
    set doc [dom parse {<root xmlns:p="uri1"/>}]
    set root [$doc documentElement]
    set newNode [$doc createElementNS uri2 p:foo]
    $root appendChild $newNode
    set result [$root asXML]
    $doc delete
    set result
} {<root xmlns:p="uri1">
    <p:foo xmlns:p="uri2"/>
</root>
}

test dom-6.1 {appendChild} {
    set doc [dom createDocument XMI]
    set root [$doc documentElement]
    set A1tag [$doc createElement "A1"]
    set A2subtag [$doc createElement "A2sub"]
    set A2tag [$doc createElement "A2"]
    $A2tag appendChild $A2subtag

    set Atag [$doc createElement "A"]
    $Atag appendChild $A1tag
    $Atag appendChild $A2tag

    set Btag [$doc createElement "B"]
    $Btag appendChild $Atag

    set Ctag [$doc createElement "C"]
    set result 0
    if {$root == "[$doc documentElement]"} {set result 1}
    $doc delete
    set result
} {1}

# cleanup
::tcltest::cleanupTests
return








