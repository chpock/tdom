# Features covered: DOM functions
#
# This file contains a collection of tests for the DOM methods of
# tDOM.
# Tested commands and object commands:
# dom:
#    dom-1.*:  createDocument, createDocumentNS
#    dom-2.*:  dom parse
#    dom-3.*:  documentElement
#    dom-4.*:  parsing/creating docs with NSes, setAttributeNS
#    dom-6.*:  appendChild
#    dom-7.*:  getElementsByTagName
#    dom-8.*:  getElementsByTagNameNS
#    dom-9.*:  nodeValue  
#    dom-10.*: setAttribute
#
# Copyright (c) 2002 Rolf Ade.

source [file join [file dir [info script]] loadtdom.tcl]

test dom-1.1 {createDocument with root node name not a XML Name} {
    list [catch {dom createDocument "root node"} msg] $msg
} "1 {invalid root element name}"

test dom-1.2 {createDocument with root node name not a XML Name} {
    list [catch {dom createDocument "1root"} msg] $msg
} "1 {invalid root element name}"

test dom-1.3 {createDocument - root name us-ascii} {
    dom createDocument "root" doc 
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "root"

test dom-1.4 {createDocument - root name with UTF-8 chars} {
    dom createDocument "\u00c4\u00d4\u00dc" doc 
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "\u00c4\u00d4\u00dc"
    
test dom-1.5 {createDocument with FQ root name} {
    dom createDocument "foo:bar" doc
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "foo:bar"

test dom-1.6 {createDocument with wrong # of args} {
    list [catch {dom createDocument "root" "http:/foo:bar" doc} msg] $msg
} "1 {wrong \# args: should be \"createDocument docElemName ?newObjVar?\"}"

test dom-1.7 {createDocumentNS - check root name} {
    set doc [dom createDocumentNS "http://foo.bar" "root"]
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "root"

test dom-1.8 {createDocumentNS - check the NS of the created root} {
    dom createDocumentNS "http://foo.bar" "root" doc
    set root [$doc documentElement]
    set result [$root namespaceURI]
    $doc delete
    set result
} "http://foo.bar"    

test dom-1.9 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "foo bar" doc} msg] $msg
} "1 {invalid local name}"

test dom-1.10 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "a:b:c" doc} msg] $msg
} "1 {invalid local name}"

test dom-1.11 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "a b:b" doc} msg] $msg
} "1 {invalid prefix name}"

test dom-1.12 {createDocumentNS with root name not a NCName} {
    list [catch {dom createDocumentNS "http://foo.bar" "a:a b" doc} msg] $msg
} "1 {invalid local name}"

test dom-1.13 {createDocumentNS - check root name} {
    set doc [dom createDocumentNS "http://foo.bar" foo:root]
    set root [$doc documentElement]
    set result [$root nodeName]
    $doc delete
    set result
} "foo:root"

test dom-2.1 {Don't quash white space at start or end of non white space content} {knownBug} {
    set doc [dom parse {<root>
    some content
    </root>}]
    set root [$doc documentElement]
    $root text
} {
    some content
    }

test dom-3.1 {repetitived documentElement with objVar, then delete} {knownBug} {
    dom createDocument "root" doc 
    $doc documentElement root
    $doc delete
    
    dom createDocument "\u00c4\u00d4\u00dc" doc 
    $doc documentElement root
    set result [$root nodeName]
    $doc delete
    set result
} "\u00c4\u00d4\u00dc"

test dom-4.1 {create nodes with same prefix, different uri's} {
    dom createDocumentNS "uri1" "p:a" doc
    set root [$doc documentElement]
    set node1 [$doc createElementNS "uri2" "p:b"]
    $root appendChild $node1
    set node2 [$doc createElementNS "uri1" "p:c"]
    $node1 appendChild $node2
    set result [$root asXML]
    $doc delete
    set result
} {<p:a xmlns:p="uri1">
    <p:b xmlns:p="uri2">
        <p:c xmlns:p="uri1"/>
    </p:b>
</p:a>
}

test dom-4.2 {parse doc with various re-declaration of a prefix} {
    set doc [dom parse {<p:a xmlns:p="uri1">
    <p:b xmlns:p="uri2">
        <p:c xmlns:p="uri1"/>
    </p:b>
</p:a>}]
    set root [$doc documentElement]
    set result [$root asXML]
    $doc delete
    set result
} {<p:a xmlns:p="uri1">
    <p:b xmlns:p="uri2">
        <p:c xmlns:p="uri1"/>
    </p:b>
</p:a>
}

test dom-4.3 {setAttribute} {
    dom createDocumentNS "uri1" "p:root" doc
    set root [$doc documentElement]
    $root setAttribute attr1 attr1Value
    set result [$root asXML]
    $doc delete
    set result
} {<p:root xmlns:p="uri1" attr1="attr1Value"/>
}

test dom-4.4 {parse doc with default NS declaration} {
    set doc [dom parse {<a xmlns:p="uri">
    <p:b/>
    <p:b/>
</a>}]
    set root [$doc documentElement]
    set result [$root asXML]
    $doc delete
    set result
} {<a xmlns:p="uri">
    <p:b/>
    <p:b/>
</a>
}

test dom-4.5 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS ""  xmlns:p uri
    $root setAttributeNS uri p:attr attrValue
    set result [$root asXML]
    $doc delete
    set result
} {<root xmlns:p="uri" p:attr="attrValue"/>
}

test dom-4.6 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr attrValue
    $root setAttributeNS ""  xmlns:p uri
    set result [$root asXML]
    $doc delete
    set result
} {<root xmlns:p="uri" p:attr="attrValue"/>
}

test dom-4.7 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr1 attrValue
    set result [$root getAttributeNS uri attr1]
    $doc delete
    set result
} {attrValue}

test dom-4.8 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS ""  xmlns:p uri
    $root setAttributeNS uri p:attr1 attrValue
    set result [$root getAttributeNS uri attr1]
    $doc delete
    set result
} {attrValue}

test dom-4.9 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr1 attrValue
    set result [$root attributes *]
    $doc delete
    set result
} {{attr1 p uri}}

test dom-4.10 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    set result [catch {$root setAttributeNS {} p:attr1 attrValue}]
    $doc delete
    set result
} {1}

test dom-4.11 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    set result [catch {$root setAttributeNS uri attr1 attrValue}]
    $doc delete
    set result
} {1}

test dom-4.12 {setAttributeNS - special prefix "xml"} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS "" xml:attr1 attrValue
    set result [$root attributes *]
    $doc delete
    set result
} {{attr1 xml http://www.w3.org/XML/1998/namespace}}

test dom-4.13 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr1 attrValue
    $root setAttributeNS uri o:attr1 newValue
    set result [$root attributes *]
    $doc delete
    set result
} {{attr1 p uri}}

test dom-4.14 {setAttributeNS} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS uri p:attr1 attrValue
    $root setAttributeNS uri o:attr1 newValue
    set result [$root getAttributeNS uri attr1]
    $doc delete
    set result
} {newValue}

test dom-4.15 {setAttributeNS - use as setAttribute} {
    dom createDocument "root" doc
    set root [$doc documentElement]
    $root setAttributeNS "" attr1 attrValue
    set result [$root attributes *]
    $doc delete
    set result
} {attr1}

test dom-4.16 {setAttributeNS - set multiple Attributes at once} {
    set doc [dom createDocumentNS uri1 "p1:root"]
    set root [$doc documentElement]
    $root setAttributeNS "" xmlns:p2 uri2
    $root setAttributeNS uri1 p1:a1 1 uri1 p1:a2 2 uri2 p2:a3 3 "" a4 4
    set result [$root asXML]
    $doc delete
    set result
} {<p1:root xmlns:p1="uri1" xmlns:p2="uri2" p1:a1="1" p1:a2="2" p2:a3="3" a4="4"/>
}

test dom-5.1 {insert FQ Element} {
    set doc [dom parse {<root xmlns:p="uri1"/>}]
    set root [$doc documentElement]
    set newNode [$doc createElementNS uri2 p:foo]
    $root appendChild $newNode
    set result [$root asXML]
    $doc delete
    set result
} {<root xmlns:p="uri1">
    <p:foo xmlns:p="uri2"/>
</root>
}

test dom-6.1 {appendChild} {
    set doc [dom createDocument XMI]
    set root [$doc documentElement]
    set A1tag [$doc createElement "A1"]
    set A2subtag [$doc createElement "A2sub"]
    set A2tag [$doc createElement "A2"]
    $A2tag appendChild $A2subtag

    set Atag [$doc createElement "A"]
    $Atag appendChild $A1tag
    $Atag appendChild $A2tag

    set Btag [$doc createElement "B"]
    $Btag appendChild $Atag

    set Ctag [$doc createElement "C"]
    set result 0
    if {$root == "[$doc documentElement]"} {set result 1}
    $doc delete
    set result
} {1}

set doc [dom parse {<root><foobar/><barfoo/><foobaz/><a/><b/><a/><c/></root>}]
set root [$doc documentElement]

test dom-7.1 {getElementsByTagName - doc method} {
    llength [$doc getElementsByTagName a]
} {2}

test dom-7.2 {getElementsByTagName - doc method} {
    llength [$doc getElementsByTagName c]
} {1}

test dom-7.3 {getElementsByTagName - doc method} {
    llength [$doc getElementsByTagName foo]
} {0}

test dom-7.4 {getElementsByTagName - node method} {
    llength [$root getElementsByTagName a]
} {2}

test dom-7.5 {getElementsByTagName - node method} {
    llength [$root getElementsByTagName c]
} {1}

test dom-7.6 {getElementsByTagName - node method} {
    llength [$root getElementsByTagName foo]
} {0}

test dom-7.7 {getElementsByTagName - node method '*' wildcard} {
    llength [$root getElementsByTagName *]
} {7}

test dom-7.8 {getElementsByTagName - doc method '*' wildcard} {
    llength [$doc getElementsByTagName *]
} {8}

test dom-7.9 {getElementsByTagName - node method tcl glob style} {
    llength [$root getElementsByTagName foo*]
} {2}

test dom-7.9 {getElementsByTagName - node method tcl glob style} {
    llength [$root getElementsByTagName *oo*]
} {3}

test dom-7.10 {getElementsByTagName - doc method tcl glob style} {
    llength [$doc getElementsByTagName foo*]
} {2}

test dom-7.11 {getElementsByTagName - doc method tcl glob style} {
    llength [$doc getElementsByTagName *oo*]
} {4}

test dom-7.12 {getElementsByTagName - doc method empty result} {
    $doc getElementsByTagName noSuchANodeName
} {}

test dom-7.13 {getElementsByTagName - node method empty result} {
    $root getElementsByTagName noSuchANodeName
} {}

test dom-7.14 {getElementsByTagName - doc method: doc order of result} {
    set nodes [$doc getElementsByTagName *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {root foobar barfoo foobaz a b a c }

test dom-7.15 {getElementsByTagName - node method: doc order of result} {
    set nodes [$root getElementsByTagName *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {foobar barfoo foobaz a b a c }

$doc delete

set doc [dom parse {
<root>mixed content 
   <elem><b>important</b> more content <b>again important</b></elem>
   <!-- a comment --> 
   <elem xmlns="defaultNS"><b/></elem>
</root>}]
set root [$doc documentElement]

test dom-7.15 {getElementsByTagName - node method mixed content} {
    llength [$doc getElementsByTagName elem]
} {1}

test dom-7.16 {getElementsByTagName - node method mixed content} {
    llength [$root getElementsByTagName elem]
} {1}

test dom-7.17 {getElementsByTagName - doc method mixed content} {
    llength [$doc getElementsByTagName b]
} {2}

test dom-7.18 {getElementsByTagName - node method mixed content} {
    llength [$root getElementsByTagName b]
} {2}

test dom-7.19 {getElementsByTagName - not a element node} {
    set textnode [$root selectNodes {descendant::text()[1]}]
    catch {$textnode getElementsByTagName b} errMsg
    set errMsg
} {Node must be an element node.}

$doc delete 

set doc [dom parse {<?xml version="1.0"?>
<soap:Envelope
xmlns:soap="http://www.w3.org/2001/12/soap-envelope"
soap:encodingStyle="http://www.w3.org/2001/12/soap-encoding">
  <soap:Body xmlns:m="http://www.stock.org/stock">
    <m:GetStockPrice>
      <m:StockName>IBM</m:StockName>
    </m:GetStockPrice>
  </soap:Body>
</soap:Envelope>}]
set root [$doc documentElement]

test dom-8.1 {getElementsByTagNameNS - root method} {
    [$root getElementsByTagNameNS "http://www.stock.org/stock" GetStockPrice] nodeName
} {m:GetStockPrice}

test dom-8.2 {getElementsByTagNameNS - root method} {
    [$root getElementsByTagNameNS "*" GetStockPrice] nodeName
} {m:GetStockPrice}

test dom-8.3 {getElementsByTagNameNS - root method} {
    llength [$root getElementsByTagNameNS "http://www.stock.org/stock" *]
} {2}

test dom-8.4 {getElementsByTagNameNS - doc method} {
    [$doc getElementsByTagNameNS "http://www.stock.org/stock" GetStockPrice] nodeName
} {m:GetStockPrice}

test dom-8.5 {getElementsByTagNameNS - doc method} {
    [$doc getElementsByTagNameNS "*" GetStockPrice] nodeName
} {m:GetStockPrice}

test dom-8.6 {getElementsByTagNameNS - doc method} {
    llength [$doc getElementsByTagNameNS "http://www.stock.org/stock" *]
} {2}

$doc delete 

set doc [dom parse {
<root>mixed content 
   <elem><b>important</b> more content <b>again important</b></elem>
   <!-- a comment --> 
   <elem xmlns="NS1"><b/></elem>
   <elem xmlns="NS2"/>
   <p:pathologic xmlns:p="firstp">
     <p:pathologic xmlns:p="secondp">
       <p:pathologic xmlns:p="firstp"/>
     </p:pathologic>
   </p:pathologic>
</root>}]
set root [$doc documentElement]

test dom-8.7 {getElementsByTagNameNS - doc method pathologic XML} {
    llength [$doc getElementsByTagNameNS "firstp" pathologic]
} {2}

test dom-8.8 {getElementsByTagNameNS - doc method pathologic XML} {
    llength [$doc getElementsByTagNameNS "secondp" pathologic]
} {1}

test dom-8.9 {getElementsByTagNameNS - doc method pathologic XML} {
    llength [$doc getElementsByTagNameNS "*" pathologic]
} {3}

test dom-8.10 {getElementsByTagNameNS - node method pathologic XML} {
    llength [$root getElementsByTagNameNS "firstp" pathologic]
} {2}

test dom-8.11 {getElementsByTagNameNS - node method pathologic XML} {
    llength [$root getElementsByTagNameNS "secondp" pathologic]
} {1}

test dom-8.12 {getElementsByTagNameNS - node method pathologic XML} {
    llength [$root getElementsByTagNameNS "*" pathologic]
} {3}

test dom-8.13 {getElementsByTagNameNS - doc method} {
    llength [$doc getElementsByTagNameNS "NS1" elem]
} {1}

test dom-8.14 {getElementsByTagNameNS - doc method} {
    llength [$doc getElementsByTagNameNS "NS2" elem]
} {1}

test dom-8.15 {getElementsByTagNameNS - doc method} {
    llength [$doc getElementsByTagNameNS "*" elem]
} {3}

test dom-8.16 {getElementsByTagNameNS - node method} {
    llength [$root getElementsByTagNameNS "NS1" elem]
} {1}

test dom-8.17 {getElementsByTagNameNS - node method} {
    llength [$root getElementsByTagNameNS "NS2" elem]
} {1}

test dom-8.18 {getElementsByTagNameNS - node method} {
    llength [$root getElementsByTagNameNS "*" elem]
} {3}

test dom-8.19 {getElementsByTagNameNS - doc method empty namespace} {
    set nodes [$doc getElementsByTagNameNS "" *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {root elem b b }

test dom-8.19 {getElementsByTagNameNS - node method empty namespace} {
    set nodes [$root getElementsByTagNameNS "" *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {elem b b }

test dom-8.20 {getElementsByTagNameNS - not a element node} {
    set textnode [$root selectNodes {descendant::text()[1]}]
    catch {$textnode getElementsByTagName b} errMsg
    set errMsg
} {Node must be an element node.}

$doc delete

set doc [dom parse {
<root xmlns="defaultNS1">
  <elem1 xmlns="">
    <elem2 xmlns="defaultNS2">
      <elem3 xmlns=""/>
    </elem2>
  </elem1>
</root>}]
set root [$doc documentElement]

test dom-8.21 {getElementsByTagNameNS - unset default NS} {
    set nodes [$root getElementsByTagNameNS "" *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {elem1 elem3 }
   
test dom-8.22 {getElementsByTagName - unset default NS} {
    set nodes [$root getElementsByTagName *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {elem1 elem3 }

test dom-8.23 {getElementsByTagNameNS - unset default NS} {
    set nodes [$root getElementsByTagNameNS * *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {elem1 elem2 elem3 }

test dom-8.24 {getElementsByTagNameNS - unset default NS} {
    set nodes [$doc getElementsByTagNameNS * *]
    set result ""
    foreach node $nodes {
        append result "[$node nodeName] "
    }
    set result
} {root elem1 elem2 elem3 }

$doc delete

set doc [dom parse {
<root>text node<!--comment node--><?mytarget PI node?></root>}]
set root [$doc documentElement]

test dom-9.1 {nodeValue - TEXT_NODE} {
    [$root firstChild] nodeValue
} {text node}

test dom-9.2 {nodeValue - COMMENT_NODE} {
    $root firstChild firstChild
    $firstChild nextSibling commentNode
    $commentNode nodeValue
} {comment node}

test dom-9.3 {nodeValue - PROCESSING_INSTRUCTION_NODE} {
    [$root lastChild] nodeValue
} {PI node}

test dom-9.4 {nodeValue - CDATA_SECTION_NODE} {
    set cdNode [$doc createCDATASection "cdata section node"]
    $root appendChild $cdNode
    [$root lastChild] nodeValue
} {cdata section node}

test dom-9.5 {nodeValue with set - TEXT_NODE} {
    set result [[$root firstChild] nodeValue "new text value"]
    append result "/" [[$root firstChild] nodeValue]
} {text node/new text value}

test dom-9.6 {nodeValue with set - COMMENT_NODE} {
    set textNode [$root firstChild]
    set node [$textNode nextSibling]
    set result [$node nodeValue  "new comment text"]
    append result "/" [$commentNode nodeValue]
} {comment node/new comment text}

test dom-9.7 {nodeValue - PROCESSING_INSTRUCTION_NODE does not allow setting} {
    set piNode [$root selectNodes processing-instruction('mytarget')]
    catch {$piNode nodeValue "new pi value"}
} {1}

test dom-9.8 {nodeValue - CDATA_SECTION_NODE} {
    set result [[$root lastChild] nodeValue "new text"]
    append result "/" [[$root lastChild] nodeValue]
} {cdata section node/new text}

$doc delete

set doc [dom parse <foo/>]
set root [$doc documentElement]

test dom-10.1 {setAttribute - set multiple attributes at once} {
    $root setAttribute a1 1 a2 2 a3 3 a4 4 a5 5 a6 6 a7 7 a8 8
    $root asXML
} {<foo a1="1" a2="2" a3="3" a4="4" a5="5" a6="6" a7="7" a8="8"/>
}

# cleanup
::tcltest::cleanupTests
return

